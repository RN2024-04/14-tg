from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import *

api = "7499561329:AAEVOu2oTcRMk6jez_FcN-vtpd8eWUgh_Fw"
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())
kb = ReplyKeyboardMarkup(resize_keyboard=True)
button4 = KeyboardButton(text='Рeгистрация')
button = KeyboardButton(text='Купить')
button2 = KeyboardButton(text='Информация')
button3 = KeyboardButton(text='Рассчитать')
kb.row(button4)
kb.row(button)
kb.row(button2)
kb.row(button3)


catalog_kb = InlineKeyboardMarkup()
but1 = InlineKeyboardButton(text='Рассчитать норму калорий', callback_data='calories')
but2 = InlineKeyboardButton(text='Формулы расчёта', callback_data='formulas')
catalog_kb.add(but1)
catalog_kb.add(but2)

catalog_kb4 = InlineKeyboardMarkup()
but45=InlineKeyboardButton(text="Product1", callback_data="product_buying")
but46=InlineKeyboardButton(text="Product2", callback_data="product_buying")
but47=InlineKeyboardButton(text="Produc3", callback_data="product_buying")
catalog_kb4.add(but45)
catalog_kb4.add(but46)
catalog_kb4.add(but47)

class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()

class RegistrationState(StatesGroup):
    username=State()
    email=State()
    age=State()
    balance=State()


@dp.message_handler(commands=['start'])
async def starter(message):
    await message.answer('Привет! Я бот помогающий твоему здоровью.', reply_markup=kb)


@dp.message_handler(text='Регистрация')
async def sing_up(message):
    await message.answer('Введите имя пользователя (только латинский алфавит)')
    await RegistrationState.username.set()


@dp.message_handler(state=RegistrationState.username)
async def set_username(message, state):
    if not is_include(message.text):
        await state.update_data(username=message.text)
        await message.answer("Введите свой email:")
        await RegistrationState.email.set()
    else:
        await message.answer('Пользователь существует, введите другое имя')
        await RegistrationState.username.set()

@dp.message_handler(state=RegistrationState.email)
async def set_email(message, state):
    await state.update_data(email=message.text)
    await message.answer("Введите свой  возраст:")
    await RegistrationState.age.set()

@dp.message_handler(state=RegistrationState.age)
async def set_age(message, state):
    await state.update_data(age=message.text)
    data = await state.get_data()
    add_users(data['username'], data['email'], data['age'])
    await state.finish()
    await message.answer('Регистрация прошла успешно')

@dp.message_handler(text='Рассчитать')
async def main_menu(message):
    await message.answer('Выберите опцию:', reply_markup=catalog_kb)


@dp.message_handler(text='Информация')
async def set_age2(message):
    await message.answer('Лол')


@dp.message_handler(text='Купить')
async def get_buying_list(message):
    for i in range(1,4):
        with open(f'{i}.jpg','rb') as img:
                    # for j in range (1,4):
            await message.answer_photo(img,f'Название: Product{i} | Описание: описание {i} | Цена: {i * 100}', reply_markup=catalog_kb4)
            await message.answer('Выберите продукт для покупки:', reply_markup=catalog_kb4)
        # await message.answer('Выберите продукт для покупки:', reply_markup=catalog_kb4)



@dp.callback_query_handler(text='product_buying')
async def send_confirm_message(call):
    await call.message.answer('Вы успешно приобрели продукт!')
    await call.answer()

@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer('для мужчин: 10 х вес (кг) + 6,25 x рост (см) – 5 х возраст (г) + 5;'
                              '\nдля женщин: 10 x вес (кг) + 6,25 x рост (см) – 5 x возраст (г) – 161')
    await call.answer()


@dp.callback_query_handler(text=['calories'])
async def set_age(call):
    await call.message.answer('Введите свой возраст:')
    await call.answer()
    await UserState.age.set()


@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer('Введите свой рост:')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weigth(message, state):
    await state.update_data(growth=message.text)
    await message.answer('Введите свой вес: ')
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    data = await state.get_data()
    age = data['age']
    growth = data['growth']
    weight = data['weight']
    ccal = 10 * int(weight) + 6.25 * int(growth) - 5 * int(age) + 5
    await message.answer(f'Ваша норма каллорий:{ccal}')
    await state.finish()



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
